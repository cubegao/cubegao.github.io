<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fadaixiaohai</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-09T10:26:20.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fadaixiaohai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装frida的一些坑</title>
    <link href="http://yoursite.com/2019/10/09/frida_install/"/>
    <id>http://yoursite.com/2019/10/09/frida_install/</id>
    <published>2019-10-09T09:47:33.000Z</published>
    <updated>2019-10-09T10:26:20.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始安装frida"><a href="#开始安装frida" class="headerlink" title="开始安装frida"></a>开始安装frida</h1><p>首先需要安装python，Mac已经自带python2.7，frida作者是推荐安装python3.x。python2.x同样也能安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install frida</div></pre></td></tr></table></figure><p>如果报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.</div></pre></td></tr></table></figure><p>安装命令修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip install frida --ignore-installed six</div></pre></td></tr></table></figure><p>如果报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception:</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/Library/Python/2.7/site-packages/pip-9.0.1-py2.7.egg/pip/basecommand.py&quot;, line 215, in main</div><div class="line">    status = self.run(options, args)</div></pre></td></tr></table></figure><p>安装命令修改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo -H pip install frida --ignore-installed six</div></pre></td></tr></table></figure><p>然后一个小时过去了，回来一看卡住了，一直停留在下面这个地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Running setup.py install for frida</div></pre></td></tr></table></figure><p>如果有科学上网工具，可以操作一下。如果没有也没关系，我们可以先把egg文件下到本地用setuptools进行安装。</p><h3 id="先装setuptools"><a href="#先装setuptools" class="headerlink" title="先装setuptools"></a>先装setuptools</h3><p><a href="https://pypi.org/project/setuptools/#files" target="_blank" rel="external">https://pypi.org/project/setuptools/#files</a></p><p>下载最新版的.whl文件，命令行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install (本地.whl文件路径).whl</div></pre></td></tr></table></figure><h3 id="通过setuptools安装frida"><a href="#通过setuptools安装frida" class="headerlink" title="通过setuptools安装frida"></a>通过setuptools安装frida</h3><p><a href="https://pypi.org/project/frida/#files" target="_blank" rel="external">https://pypi.org/project/frida/#files</a></p><p>下载你需要的版本.egg文件，命令行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ easy_install (本地.egg文件路径).egg</div></pre></td></tr></table></figure><h1 id="安装frida-tools"><a href="#安装frida-tools" class="headerlink" title="安装frida-tools"></a>安装frida-tools</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install frida-tools</div></pre></td></tr></table></figure><p>如果安装卡住，也可以先下载文件到本地。</p><p><a href="https://pypi.org/project/frida-tools/#files" target="_blank" rel="external">https://pypi.org/project/frida-tools/#files</a></p><p>解压后运行setup.py安装。</p><h1 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ frida-ps</div></pre></td></tr></table></figure><p>如果能显示当前系统进程则证明安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开始安装frida&quot;&gt;&lt;a href=&quot;#开始安装frida&quot; class=&quot;headerlink&quot; title=&quot;开始安装frida&quot;&gt;&lt;/a&gt;开始安装frida&lt;/h1&gt;&lt;p&gt;首先需要安装python，Mac已经自带python2.7，frida作者是推荐安装
      
    
    </summary>
    
    
      <category term="frida" scheme="http://yoursite.com/tags/frida/"/>
    
      <category term="Cydia" scheme="http://yoursite.com/tags/Cydia/"/>
    
  </entry>
  
  <entry>
    <title>SSH连接iOS设备的几种方法</title>
    <link href="http://yoursite.com/2019/10/09/iOS_ssh/"/>
    <id>http://yoursite.com/2019/10/09/iOS_ssh/</id>
    <published>2019-10-09T08:22:33.000Z</published>
    <updated>2019-10-09T10:26:20.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h1><ul><li>一台已经越狱的iPhone</li><li>一台PC</li></ul><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><ol><li>打开Cydia,搜索OpenSSH，安装。<br><img src="/images/da95dc82edb749c09f8da787f1630990.png" alt=""></li><li>保证PC和iPhone在同一局域网下，然后连接SSH。默认的账户是root，密码是alpine。地址是设备的局域网地址。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh root@192.169.50.99</div></pre></td></tr></table></figure></li></ol><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><ol><li>打开Cydia，卸载掉OpenSSH（如果安装了），然后添加源：<code>http://cydia.ichitaso.com/test</code>。（如果iPhone重启了，打开Cydia闪退，记得先Re-Jailbreak）</li><li>在Cydia中搜索dropbear，安装。<br><img src="/images/d51c54fa7d0b45e28ee73ac6e7124417.png" alt=""></li><li>然后重复方案一的2.,直接SSH连接即可。</li></ol><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>如果wifi连接iPhone设备一直失败怎么办？<br>我们可以借助<code>usbmuxd</code>这个工具通过USB连接。<br><code>usbmuxd</code> 是苹果的一个服务，这个服务主要用于在USB协议上实现多路TCP连接，将USB通信抽象为TCP通信。苹果的iTunes、Xcode，都直接或间接地用到了这个服务。它提供了一个USB - TCP的转换服务。</p><ol><li><p>安装usbmuxd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install usbmuxd</div></pre></td></tr></table></figure></li><li><p>建立映射关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ iproxy 1234 22</div><div class="line">$ waiting for connection</div></pre></td></tr></table></figure></li></ol><p>这样当前连接设备的22端口(SSH端口)映射到电脑的1234端口，因此想和设备通信，直接和本地端口1234通信就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -p 1234 root@127.0.0.1</div></pre></td></tr></table></figure></p><p>如果你还是连不上设备，那就打开i4助手-工具箱-打开SSH通道。当然前提是设备已经安装了OpenSSH。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;必备工具&quot;&gt;&lt;a href=&quot;#必备工具&quot; class=&quot;headerlink&quot; title=&quot;必备工具&quot;&gt;&lt;/a&gt;必备工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一台已经越狱的iPhone&lt;/li&gt;
&lt;li&gt;一台PC&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;方案一&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Cydia" scheme="http://yoursite.com/tags/Cydia/"/>
    
      <category term="usbmuxd" scheme="http://yoursite.com/tags/usbmuxd/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="OpenSSH" scheme="http://yoursite.com/tags/OpenSSH/"/>
    
  </entry>
  
  <entry>
    <title>在Centos7.2上安装编译Swift</title>
    <link href="http://yoursite.com/2018/03/30/installing_and_compiling_swift_on_centos7.2/"/>
    <id>http://yoursite.com/2018/03/30/installing_and_compiling_swift_on_centos7.2/</id>
    <published>2018-03-30T08:10:33.000Z</published>
    <updated>2019-10-09T10:26:20.773Z</updated>
    
    <content type="html"><![CDATA[<p>由于想用Swift写服务玩玩，准备在Centos7.2上部署一个Swift环境，能跑一下Perfect。</p><p>由于Docker的种种好处，当然是选择它来部署Swift环境。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。"><a href="#更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。" class="headerlink" title="更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。"></a>更新yum包到最新。<code>如果是生产机器务必慎重更新内核，避免出现不必要的问题。</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># yum update</span></div></pre></td></tr></table></figure><h4 id="执行-Docker-安装脚本。"><a href="#执行-Docker-安装脚本。" class="headerlink" title="执行 Docker 安装脚本。"></a>执行 Docker 安装脚本。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># curl -fsSL https://get.docker.com/ | sh</span></div></pre></td></tr></table></figure><h4 id="启动-Docker-进程。"><a href="#启动-Docker-进程。" class="headerlink" title="启动 Docker 进程。"></a>启动 Docker 进程。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># service docker start</span></div></pre></td></tr></table></figure><h4 id="验证-docker-是否安装成功并在容器中执行一个测试的镜像。"><a href="#验证-docker-是否安装成功并在容器中执行一个测试的镜像。" class="headerlink" title="验证 docker 是否安装成功并在容器中执行一个测试的镜像。"></a>验证 docker 是否安装成功并在容器中执行一个测试的镜像。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run hello-world</span></div><div class="line">Hello from Docker!</div></pre></td></tr></table></figure><p>大概两三分钟就安装好了，国内的服务器可能要用镜像加速会好点。</p><h3 id="安装Swift"><a href="#安装Swift" class="headerlink" title="安装Swift"></a>安装Swift</h3><h4 id="拉取Swift的镜像到本地。"><a href="#拉取Swift的镜像到本地。" class="headerlink" title="拉取Swift的镜像到本地。"></a>拉取Swift的镜像到本地。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker pull swift</span></div></pre></td></tr></table></figure><p>镜像拉取成功后就可以使用docker images列出当前我们拉取到本地的所有镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">swift               latest              934835f58041        3 weeks ago         1.3GB</div><div class="line">hello-world         latest              f2a91732366c        4 months ago        1.85kB</div></pre></td></tr></table></figure></p><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h4 id="在镜像里面创建一个容器并且连接它"><a href="#在镜像里面创建一个容器并且连接它" class="headerlink" title="在镜像里面创建一个容器并且连接它"></a>在镜像里面创建一个容器并且连接它</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run  -it --name swiftfun swift /bin/bash</span></div></pre></td></tr></table></figure><p>其中<code>-it</code>意思是以交互式(interactive)终端(tty)的方式运行，<code>--name swiftfun</code>指定容器的名称，<code>/bin/bash</code>是容器启动后执行的命令，也就是进入bash控制台，运行成功后会进入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment">#</span></div></pre></td></tr></table></figure></p><p>默认是root用户，这里我们使用诸如<code>apt-get</code>命令时就不需要加sudo了</p><p>现在，你可以在容器中运行<code>swift --version</code>来确认是否配置成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment"># swift --version</span></div><div class="line">Swift version 4.0.3 (swift-4.0.3-RELEASE)</div><div class="line">Target: x86_64-unknown-linux-gnu</div></pre></td></tr></table></figure></p><p>然后用<code>swift</code>命令看是否能进入swift REPL：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment"># swift</span></div><div class="line">error: failed to launch REPL process: process launch failed: <span class="string">'A'</span> packet returned an error: 8</div></pre></td></tr></table></figure></p><p>发现报错了，找到Docker官方给的解决方案是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run --cap-add sys_ptrace -it --rm swift swift</span></div><div class="line">error: failed to launch REPL process: process launch failed: <span class="string">'A'</span> packet returned an error: 8</div></pre></td></tr></table></figure></p><p>运行时添加了<code>--cap-add sys_ptrace</code>选项，应该是添加一个系统的权限。加上<code>--rm</code>选项是创建新容器时，把已经存在的旧容器删掉。但是依然是相同的报错。</p><p>最后在github上面好到了解决方案。添加一条<code>--privileged</code>。它的含义是：<br>–privileged=false Give extended privileges to this container 赋予容器扩展权限<br>运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run --cap-add sys_ptrace --privileged -it --rm swift swift</span></div><div class="line">Welcome to Swift version 4.0.3 (swift-4.0.3-RELEASE). Type :<span class="built_in">help</span> <span class="keyword">for</span> assistance.</div><div class="line">1&gt; <span class="built_in">print</span>(<span class="string">"hello world"</span>)</div><div class="line">hello world</div><div class="line">2&gt;</div></pre></td></tr></table></figure></p><p>以后想要连接swiftfun这个容器，必须先启动，后连接。方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker start swiftfun</span></div><div class="line">swiftfun</div><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker attach swiftfun</span></div><div class="line">root@8408a26c123b:/<span class="comment">#</span></div></pre></td></tr></table></figure></p><p>查看所有容器状态:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</div><div class="line">8408a26c123b        swift               <span class="string">"/bin/bash"</span>         27 hours ago        Exited (0) About a minute ago                       swiftfun</div><div class="line">cc12559d586c        hello-world         <span class="string">"/hello"</span>            27 hours ago        Exited (0) 27 hours ago                             boring_yonath</div></pre></td></tr></table></figure></p><h3 id="设置Docker开机启动。"><a href="#设置Docker开机启动。" class="headerlink" title="设置Docker开机启动。"></a>设置Docker开机启动。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># systemctl enable docker</span></div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</div></pre></td></tr></table></figure><p>以上就是本文的所有内容了，祝你玩得愉快！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于想用Swift写服务玩玩，准备在Centos7.2上部署一个Swift环境，能跑一下Perfect。&lt;/p&gt;
&lt;p&gt;由于Docker的种种好处，当然是选择它来部署Swift环境。&lt;/p&gt;
&lt;h3 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; cla
      
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Centos" scheme="http://yoursite.com/tags/Centos/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议中GET和POST的区别</title>
    <link href="http://yoursite.com/2017/02/08/get_post/"/>
    <id>http://yoursite.com/2017/02/08/get_post/</id>
    <published>2017-02-08T09:11:03.000Z</published>
    <updated>2019-10-09T10:26:20.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于HTTP"><a href="#关于HTTP" class="headerlink" title="关于HTTP"></a>关于HTTP</h3><p><code>HTTP</code>（超文本传输协议）是一种请求/响应型的协议。</p><p>HTTP的<strong>语法</strong>大致如下：<br>客户端给服务端发送的请求，由三部分组成：<strong>请求行，消息报头，消息正文。</strong><br>请求行：<code>Method Request-URI HTTP-Version CRLF</code><br>例如：    <code>GET /form.html HTTP/1.1 /r/n</code><br>服务端给客户端发送的响应，也是三部分组成：<strong>状态行，消息报头，响应正文。</strong><br>状态行：<code>HTTP-Version Status-Code Reason-Phrase</code><br>例如:      <code>HTTP/1.1 200 OK /r/n</code></p><p>正写到这里，小A走过来说：<code>Request-URL</code>，你打错了一个字母？<br>其实没错！<br>1.<code>URI</code>的全称是<code>uniform resource identifier</code>，统一资源标识符，用来唯一的标识一个资源。<br>2.<code>URL</code>的全称是<code>uniform resource locator</code>，统一资源定位符。用来标识一个资源，还指明了如何定位这个资源。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.qq.com/index.html</div></pre></td></tr></table></figure></p><p>3.<code>URN</code>的全称是<code>Uniform Resource Name</code>，统一资源名称。通过名称来标识资源。如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mailto:xxx@qq.com</div></pre></td></tr></table></figure></p><p>其中，<code>URL</code>,<code>URN</code>是<code>URI</code>的子集。</p><p>HTTP的请求方法有<code>OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT</code>等。其中<code>GET、POST、PUT、DELETE</code>对应着对当前资源的查、改、增、删4个操作。</p><h3 id="HTTP请求中的GET方法"><a href="#HTTP请求中的GET方法" class="headerlink" title="HTTP请求中的GET方法"></a>HTTP请求中的GET方法</h3><p><code>GET</code>方法的语义是获取资源，而且是安全，幂等和可缓存的。<br>1.<strong>安全</strong>，这里的安全不是通常理解的安全。所谓安全意味着该操作用于获取信息而非修改信息。换句话说，<code>GET</code>请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。<code>HTTP</code>请求方法中，<code>GET, HEAD, OPTIONS</code> 和 <code>TRACE</code>这几个方法是安全的。<br>2.<strong>幂等</strong>，指同一个请求方法执行多次和仅执行一次的效果完全相同。比如，刷微博的时候，内容是不断更新的。虽然第二次请求会返回不同的一批内容，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的内容。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。<br>3.<strong>可缓存</strong>，指的是方法是可以被缓存的。<code>HTTP</code>请求方法中，<code>GET，HEAD</code>是可缓存的。（其实部分<code>POST</code>也是可缓存的，如果对当前资源来说是幂等的，那就可以缓存。一种实现是将<code>POST</code>的内容（附带一部分头信息），做一个摘要，将摘要附在<code>URL</code>后面，使用这个来作为缓存的<code>key</code>。换句话说，缓存主键被修改为包括<code>URL</code>以及一些请求体，后续的拥有相同的请求体的请求将会命中缓存。）</p><h3 id="HTTP请求中的POST方法"><a href="#HTTP请求中的POST方法" class="headerlink" title="HTTP请求中的POST方法"></a>HTTP请求中的POST方法</h3><p><code>POST</code>方法的语义是处理资源，或者说修改资源。还是微博为例，发微博的操作应该通过<code>POST</code>实现，因为在微博提交后站点的资源已经不同了，或者说资源被修改了。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>主要从两方面分析，语法和语义。<br>1.语法<br><code>POST</code>方法和<code>GET</code>方法的语法是一样的。因为它们都是<a href="#关于HTTP">HTTP请求</a>。<br>2.语义<br><code>GET</code>的语义就是获取资源，<code>POST</code>的语义是处理资源，或修改资源。</p><p><strong>语义定义了这一类型的请求具有什么样的性质。那么在具体实现这两个方法时，就必须考虑其语义，做出符合其语义的行为。当然在符合语法的前提下实现违背语义的行为也是可以做到的，比如使用<code>GET</code>方法修改用户信息，<code>POST</code>获取资源列表，这样就只能说这个请求是合法的，但不是符合语义的。</strong></p><p><strong><code>GET</code>的语义是请求获取<code>Request-URI</code>指定的资源。<code>GET</code>方法是安全、幂等、可缓存的。<code>GET</code>方法的报文主体没有任何语义，所以一般服务器会直接忽略。<code>POST</code>的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。<code>POST</code>不安全，不幂等，（大部分实现）不可缓存。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于HTTP&quot;&gt;&lt;a href=&quot;#关于HTTP&quot; class=&quot;headerlink&quot; title=&quot;关于HTTP&quot;&gt;&lt;/a&gt;关于HTTP&lt;/h3&gt;&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt;（超文本传输协议）是一种请求/响应型的协议。&lt;/p&gt;
&lt;p&gt;HTTP的&lt;s
      
    
    </summary>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="GET" scheme="http://yoursite.com/tags/GET/"/>
    
      <category term="POST" scheme="http://yoursite.com/tags/POST/"/>
    
  </entry>
  
  <entry>
    <title>容易被人忽略的NSCache</title>
    <link href="http://yoursite.com/2017/01/15/nscache/"/>
    <id>http://yoursite.com/2017/01/15/nscache/</id>
    <published>2017-01-15T02:22:24.000Z</published>
    <updated>2019-10-09T10:26:20.773Z</updated>
    
    <content type="html"><![CDATA[<p>第一次见到<code>NSCache</code>，是在<code>SDWebImage</code>中。<code>SDWebImage</code>的内存缓存机制就是通过<code>NSCache</code>完成的。所以可能你不太了解这个类，但是其实一直在使用它。</p><h3 id="为什么要使用NSCache？"><a href="#为什么要使用NSCache？" class="headerlink" title="为什么要使用NSCache？"></a>为什么要使用NSCache？</h3><p>我们通常用缓存来临时存储短时间使用但创建昂贵的对象。重用这些对象可以优化性能，因为它们的值不需要重新计算。另外一方面，这些对象对于程序来说不是紧要的，在内存紧张时会被丢弃。如果对象被丢弃了，则下次使用时需要重新计算。</p><p><code>NSCache</code>是一个可变的集合，主要用来存储<code>key-value</code>对。它有着和<code>NSMutableDictionary</code>类似的API。实际上，<code>NSCache</code>就像是一个会自动移除对象来释放内存的<code>NSMutableDictionary</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (id)objectForKey:(id)key</div><div class="line">- (void)setObject:(id)obj forKey:(id)key</div><div class="line">- (void)setObject:(id)obj forKey:(id)key cost:(NSUInteger)num</div><div class="line">- (void)removeObjectForKey:(id)key</div><div class="line">- (void)removeAllObjects</div></pre></td></tr></table></figure></p><p><code>NSCahce</code>与可变集合不同之处：</p><blockquote><p>1.<code>NSCache</code>类有自己的自动删除策略，以确保缓存不用使用太多的系统内存。如果其他应用需要内存，则自动删除策略会从缓存中删除一些项目，从而最大限度的减少内存占用。<br> 2.<code>NSCache</code>是线程安全的，我们可以从不同的线程中添加、删除和查询缓存中的对象，而不需要锁定缓存区域。其中线程安全是<code>pthread_mutex</code>完成的。<br>3.明显区别于<code>NSMutableDictionary</code>的是，键对象不会被<code>retain</code>。（键不需要实现<code>NSCopying</code>协议）</p></blockquote><h3 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h3><p><code>NSCache</code>提供了一个<code>delegate</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)cache:(NSCache *)cache willEvictObject:(id)obj</div></pre></td></tr></table></figure></p><p>需要注意的是在这个代理方法中不能修改<code>NSCache</code>对象，也就是只能测试使用。</p><blockquote><p><code>NSCache</code>提供了一系列的属性来限制缓存的大小。比如属性<code>countLimit</code>限定了缓存最多维护的对象的个数，属性<code>totalCostLimit</code>限定了缓存能维持的最大内存。<br>在存取方法中，有一个<code>setObject:forKey:cost:</code>方法，它和<code>setObject:forKey:</code>方法类似，但是带着<code>cost</code>参数。<code>cost</code>表示每次的消耗，如对象占用的字节数。当内存不足或者所有缓存对象的总消耗超过了最大值时，缓存会移除其中的一些对象。</p></blockquote><p>上面这些内容，看起来很美好，但是问题来了。从缓存中移除对象并不能保证顺序，也就是有可能刚写入的对象，就被丢弃了。如果你要使用<code>cost</code>来完成一些特殊的需求，那你可能要失望了。所以计算<code>cost</code>值，可能反而会增加使用缓存的代价。</p><blockquote><p>另外<code>countLimit</code>和<code>totalCostLimit</code>属性都是不精确或者不严格的，也就是如果缓存的数量超过了<code>countLimit</code>，或者缓存维持的最大内存超过了<code>totalCostLimit</code>，缓存中的对象可能会被丢弃，也可能不会，具体的策略只有苹果自己知道。<br>虽然苹果提供了<code>NSDiscardableContent</code>来控制对象是否会被自动移除的机制，但是这可能会让你碰到更多的问题。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然<code>NSCache</code>有一些缺点，但是也应该去积极使用。如果我们需要构建内存缓存机制，就应该选用<code>NSCache</code>而非<code>NSDictionary</code>，这样可以减少我们应用对内存的占用，从而达到优化内存的目标。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次见到&lt;code&gt;NSCache&lt;/code&gt;，是在&lt;code&gt;SDWebImage&lt;/code&gt;中。&lt;code&gt;SDWebImage&lt;/code&gt;的内存缓存机制就是通过&lt;code&gt;NSCache&lt;/code&gt;完成的。所以可能你不太了解这个类，但是其实一直在使用它。&lt;/
      
    
    </summary>
    
    
      <category term="NSCache" scheme="http://yoursite.com/tags/NSCache/"/>
    
  </entry>
  
</feed>
