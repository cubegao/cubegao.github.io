<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fadaixiaohai</title>
  
  <subtitle>怕什么真理无穷,
进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-01T04:18:06.507Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>fadaixiaohai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Centos7.2上编译安装Swift</title>
    <link href="http://yoursite.com/2018/03/30/Installing%20Swift%20on%20Centos%207.2%20/"/>
    <id>http://yoursite.com/2018/03/30/Installing Swift on Centos 7.2 /</id>
    <published>2018-03-30T08:10:33.000Z</published>
    <updated>2018-04-01T04:18:06.507Z</updated>
    
    <content type="html"><![CDATA[<p>由于想用Swift写服务玩玩，准备在Centos7.2上部署一个Swift环境，能跑一下Perfect。</p><p>由于Docker的种种好处，当然是选择它来部署Swift环境。</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。"><a href="#更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。" class="headerlink" title="更新yum包到最新。如果是生产机器务必慎重更新内核，避免出现不必要的问题。"></a>更新yum包到最新。<code>如果是生产机器务必慎重更新内核，避免出现不必要的问题。</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># yum update</span></div></pre></td></tr></table></figure><h4 id="执行-Docker-安装脚本。"><a href="#执行-Docker-安装脚本。" class="headerlink" title="执行 Docker 安装脚本。"></a>执行 Docker 安装脚本。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># curl -fsSL https://get.docker.com/ | sh</span></div></pre></td></tr></table></figure><h4 id="启动-Docker-进程。"><a href="#启动-Docker-进程。" class="headerlink" title="启动 Docker 进程。"></a>启动 Docker 进程。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># service docker start</span></div></pre></td></tr></table></figure><h4 id="验证-docker-是否安装成功并在容器中执行一个测试的镜像。"><a href="#验证-docker-是否安装成功并在容器中执行一个测试的镜像。" class="headerlink" title="验证 docker 是否安装成功并在容器中执行一个测试的镜像。"></a>验证 docker 是否安装成功并在容器中执行一个测试的镜像。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run hello-world</span></div><div class="line">Hello from Docker!</div></pre></td></tr></table></figure><p>大概两三分钟就安装好了，国内的服务器可能要用镜像加速会好点。</p><h3 id="安装Swift"><a href="#安装Swift" class="headerlink" title="安装Swift"></a>安装Swift</h3><h4 id="拉取Swift的镜像到本地。"><a href="#拉取Swift的镜像到本地。" class="headerlink" title="拉取Swift的镜像到本地。"></a>拉取Swift的镜像到本地。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker pull swift</span></div></pre></td></tr></table></figure><p>镜像拉取成功后就可以使用docker images列出当前我们拉取到本地的所有镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">swift               latest              934835f58041        3 weeks ago         1.3GB</div><div class="line">hello-world         latest              f2a91732366c        4 months ago        1.85kB</div></pre></td></tr></table></figure></p><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h4 id="在镜像里面创建一个容器并且连接它"><a href="#在镜像里面创建一个容器并且连接它" class="headerlink" title="在镜像里面创建一个容器并且连接它"></a>在镜像里面创建一个容器并且连接它</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run  -it --name swiftfun swift /bin/bash</span></div></pre></td></tr></table></figure><p>其中<code>-it</code>意思是以交互式(interactive)终端(tty)的方式运行，<code>--name swiftfun</code>指定容器的名称，<code>/bin/bash</code>是容器启动后执行的命令，也就是进入bash控制台，运行成功后会进入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment">#</span></div></pre></td></tr></table></figure></p><p>默认是root用户，这里我们使用诸如<code>apt-get</code>命令时就不需要加sudo了</p><p>现在，你可以在容器中运行<code>swift --version</code>来确认是否配置成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment"># swift --version</span></div><div class="line">Swift version 4.0.3 (swift-4.0.3-RELEASE)</div><div class="line">Target: x86_64-unknown-linux-gnu</div></pre></td></tr></table></figure></p><p>然后用<code>swift</code>命令看是否能进入swift REPL：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@8408a26c123b:/<span class="comment"># swift</span></div><div class="line">error: failed to launch REPL process: process launch failed: <span class="string">'A'</span> packet returned an error: 8</div></pre></td></tr></table></figure></p><p>发现报错了，找到Docker官方给的解决方案是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run --cap-add sys_ptrace -it --rm swift swift</span></div><div class="line">error: failed to launch REPL process: process launch failed: <span class="string">'A'</span> packet returned an error: 8</div></pre></td></tr></table></figure></p><p>运行时添加了<code>--cap-add sys_ptrace</code>选项，应该是添加一个系统的权限。加上<code>--rm</code>选项是创建新容器时，把已经存在的旧容器删掉。但是依然是相同的报错。</p><p>最后在github上面好到了解决方案。添加一条<code>--privileged</code>。它的含义是：<br>–privileged=false Give extended privileges to this container 赋予容器扩展权限<br>运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker run --cap-add sys_ptrace --privileged -it --rm swift swift</span></div><div class="line">Welcome to Swift version 4.0.3 (swift-4.0.3-RELEASE). Type :<span class="built_in">help</span> <span class="keyword">for</span> assistance.</div><div class="line">1&gt; <span class="built_in">print</span>(<span class="string">"hello world"</span>)</div><div class="line">hello world</div><div class="line">2&gt;</div></pre></td></tr></table></figure></p><p>以后想要连接swiftfun这个容器，必须先启动，后连接。方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker start swiftfun</span></div><div class="line">swiftfun</div><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker attach swiftfun</span></div><div class="line">root@8408a26c123b:/<span class="comment">#</span></div></pre></td></tr></table></figure></p><p>查看所有容器状态:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</div><div class="line">8408a26c123b        swift               <span class="string">"/bin/bash"</span>         27 hours ago        Exited (0) About a minute ago                       swiftfun</div><div class="line">cc12559d586c        hello-world         <span class="string">"/hello"</span>            27 hours ago        Exited (0) 27 hours ago                             boring_yonath</div></pre></td></tr></table></figure></p><h3 id="设置Docker开机启动。"><a href="#设置Docker开机启动。" class="headerlink" title="设置Docker开机启动。"></a>设置Docker开机启动。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fadaixiaohai ~]<span class="comment"># systemctl enable docker</span></div><div class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</div></pre></td></tr></table></figure><p>以上就是本文的所有内容了，祝你玩得愉快！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于想用Swift写服务玩玩，准备在Centos7.2上部署一个Swift环境，能跑一下Perfect。&lt;/p&gt;
&lt;p&gt;由于Docker的种种好处，当然是选择它来部署Swift环境。&lt;/p&gt;
&lt;h3 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; cla
      
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Centos" scheme="http://yoursite.com/tags/Centos/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/18/hello-world/"/>
    <id>http://yoursite.com/2018/03/18/hello-world/</id>
    <published>2018-03-18T08:10:33.000Z</published>
    <updated>2018-04-01T04:18:06.511Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
